---
- name: Get the vcenter certificate
  community.crypto.get_certificate:
    host: "{{ vsphere_server }}"
    port: 443
  register: cert

- name: Get information on certificate
  community.crypto.x509_certificate_info:
    content: "{{ cert.cert }}"
  register: result

- name: Set computed variables
  ansible.builtin.set_fact:
    vsphere_tls_thumbprint: "{{ result.fingerprints.sha1 | upper }}"
    vsphere_password_b64: "{{ vsphere_password | b64encode }}"
    tkg_http_proxy_enabled: "{{ tkg_http_proxy | length > 0 }}"
    tkg_no_proxy_full: "{{ tkg_no_proxy + ',' + (extra_no_proxy_patterns | default([]) | join(',')) }}"
    tkg_proxy_ca_cert_b64: "{{ (tkg_proxy_ca_cert == '') | ternary('', tkg_proxy_ca_cert | b64encode) }}"
    tkg_custom_image_repository_ca_certificate_b64: "{{ tkg_custom_image_repository_ca_certificate | b64encode }}"
  vars:
    extra_no_proxy_patterns:
      - localhost
      - "127.0.0.1"
      - "{{ vsphere_server }}"
      - "{{ cluster_cidr }}"
      - "{{ service_cidr }}"

- name: Get temporary file name
  ansible.builtin.tempfile:
    state: file
    suffix: ".{{ cluster_name }}"
  register: cluster_file

- name: "Prepare mc file {{ cluster_file.path }}"
  ansible.builtin.template:
    src: templates/mc.yaml.j2
    dest: "{{ cluster_file.path }}"
    mode: "0644"

- name: Create namespace {{ namespace }}
  ansible.builtin.shell: |
    kubectl apply -f - <<EOF
    {{ namespace_manifest }}
    EOF
  vars:
    namespace_manifest: |
      apiVersion: v1
      kind: Namespace
      metadata:
        name: {{ namespace }}
